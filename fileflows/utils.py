import gzip
import os
import re
import shutil
from concurrent.futures import ProcessPoolExecutor
from functools import partial
from multiprocessing import Pool
from pathlib import Path
from typing import List, Optional

import duckdb
from quicklogs import get_logger

logger = get_logger("fileflows")

def gzip_file(file: Path, suffix: str = ".csv.gz", delete: bool = True):
    gz_file = file.with_suffix(suffix)
    with open(file, "rb") as tf:
        with gzip.open(gz_file, "wb") as gf:
            shutil.copyfileobj(tf, gf)
    logger.info("Saved file: %s", gz_file)
    if delete:
        file.unlink()


def gzip_files(
    files: List[Path], suffix: str = ".csv.gz", delete: bool = True, n_proc: int = 4
):
    with Pool(n_proc) as p:
        p.map(partial(gzip_file, suffix=suffix, delete=delete), files)


def csvs_to_parquet(files: Optional[List[Path]] = None):
    """Convert CSV files to Parquet."""
    # convert csv file to parquet.
    if isinstance(files, Path) and files.is_dir():
        files = list(files.glob("*.csv.gz"))
    logger.info("Converting %i CSV files to Parquet: %s", len(files), files[:10])
    if not files:
        return
    if len(files) == 1:
        csv_to_parquet(files[0])
    else:
        max_workers = min(len(files), os.cpu_count())
        with ProcessPoolExecutor(max_workers=max_workers) as pool:
            results = pool.map(csv_to_parquet, files)
        for result in results:
            logger.info("File conversion result: %s", result)
    # remove csv files
    for file in files:
        logger.info("Removing: %s", file)
        os.remove(file)


def csv_to_parquet(file: Path):
    """Convert a CSV file to Parquet."""
    stem = file.stem.split(".")[0]
    save_path = file.with_name(f"{stem}.parquet")
    if not save_path.exists():
        logger.info("Converting %s -> %s", file, save_path)
        duckdb.execute(
            f"COPY (SELECT * FROM '{file}') TO '{save_path}' (FORMAT PARQUET);"
        )
    else:
        logger.info("Skipping %s -> %s", file, save_path)



file_extensions = [
    "3KO",
    "3dm",
    "3ds",
    "3dxml",
    "3g2",
    "3gp",
    "3mf",
    "7z",
    "CATPart",
    "CATProduct",
    "CGR",
    "GIF",
    "Gif",
    "JPEG",
    "JPG",
    "Jpeg",
    "Jpg",
    "PDF",
    "Pdf",
    "ZIP",
    "Zip",
    "a",
    "aac",
    "aaf",
    "aar",
    "action",
    "ada",
    "adb",
    "ads",
    "ai",
    "aiff",
    "ape",
    "apk",
    "ar",
    "asa",
    "asab",
    "asat",
    "asax",
    "asf",
    "ashx",
    "asm",
    "asmx",
    "asp",
    "aspx",
    "au",
    "avchd",
    "avi",
    "avif",
    "axd",
    "azw",
    "azw1",
    "azw3",
    "azw4",
    "azw6",
    "bak",
    "bas",
    "bash",
    "bat",
    "bin",
    "bmp",
    "br",
    "bz2",
    "c",
    "c++",
    "cab",
    "car",
    "cbl",
    "cbr",
    "cbz",
    "cc",
    "cfm",
    "cgi",
    "class",
    "classphp",
    "clj",
    "cob",
    "com",
    "command",
    "config",
    "cpio",
    "cpp",
    "crx",
    "cs",
    "csh",
    "csi",
    "css",
    "cssaspx",
    "csv",
    "cxx",
    "d",
    "dae",
    "dat",
    "dav",
    "db",
    "dds",
    "deb",
    "diff",
    "dll",
    "dmg",
    "do",
    "doc",
    "docx",
    "drc",
    "dwg",
    "dxf",
    "e",
    "ebook",
    "egg",
    "el",
    "eot",
    "eps",
    "epub",
    "exe",
    "f",
    "f3d",
    "f77",
    "f90",
    "feather",
    "fish",
    "flac",
    "flv",
    "for",
    "fth",
    "ftn",
    "gcode",
    "gif",
    "go",
    "gpx",
    "groovy",
    "gsm",
    "gz",
    "h",
    "h5",
    "hdf",
    "hdf5",
    "heic",
    "heif",
    "hh",
    "hpp",
    "hs",
    "htc",
    "htm",
    "html",
    "hxx",
    "iam",
    "ico",
    "ics",
    "iges",
    "igs",
    "inc",
    "include",
    "incphp",
    "ini",
    "ipt",
    "iso",
    "it",
    "iwb",
    "iwp",
    "jar",
    "java",
    "jpeg",
    "jpg",
    "js",
    "json",
    "jsp",
    "jsx",
    "jxl",
    "kml",
    "kmz",
    "ksh",
    "kt",
    "kts",
    "less",
    "lha",
    "lhs",
    "lisp",
    "log",
    "lua",
    "lz",
    "lz4",
    "lzma",
    "lzo",
    "m",
    "m2ts",
    "m2v",
    "m3u",
    "m4",
    "m4a",
    "m4p",
    "m4v",
    "mar",
    "max",
    "md",
    "mdb",
    "mid",
    "mkv",
    "mng",
    "mobi",
    "mod",
    "model",
    "mov",
    "mp2",
    "mp3",
    "mp4",
    "mpa",
    "mpe",
    "mpeg",
    "mpg",
    "mpv",
    "msg",
    "msi",
    "mts",
    "mxf",
    "mysqltxt",
    "new",
    "nim",
    "nsf",
    "nsv",
    "obj",
    "odp",
    "ods",
    "odt",
    "ogg",
    "ogm",
    "ogv",
    "ogx",
    "old",
    "org",
    "otf",
    "page",
    "pages",
    "pak",
    "par",
    "parquet",
    "patch",
    "pdf",
    "pea",
    "pgsqltxt",
    "php",
    "php3",
    "php4",
    "php5",
    "phtml",
    "pickle",
    "pkl",
    "pl",
    "pls",
    "ply",
    "png",
    "po",
    "pod",
    "pp",
    "ppt",
    "pptx",
    "prc",
    "prql",
    "prt",
    "ps",
    "ps1",
    "ps1xml",
    "psc1",
    "psd",
    "psd1",
    "psm",
    "psm1",
    "psrc",
    "pssc",
    "py",
    "qt",
    "r",
    "ra",
    "rar",
    "rb",
    "rm",
    "rmvb",
    "roq",
    "rpm",
    "rs",
    "rss",
    "rst",
    "rtf",
    "s",
    "s3m",
    "s7z",
    "sab",
    "sat",
    "scad",
    "scala",
    "scss",
    "sh",
    "shar",
    "shtml",
    "sid",
    "sldasm",
    "sldprt",
    "sms",
    "smt",
    "sql",
    "srt",
    "step",
    "stl",
    "stp",
    "svg",
    "svi",
    "swf",
    "swg",
    "swift",
    "tar",
    "tbz2",
    "tex",
    "tga",
    "tgz",
    "thm",
    "tif",
    "tiff",
    "tlz",
    "tpl",
    "ts",
    "tsv",
    "tsx",
    "ttf",
    "txt",
    "txz",
    "u3d",
    "v",
    "vb",
    "vcf",
    "vcxproj",
    "vda",
    "vob",
    "war",
    "wasm",
    "wav",
    "webm",
    "webp",
    "whl",
    "wll",
    "wma",
    "wmv",
    "woff",
    "woff2",
    "wpd",
    "wps",
    "wrl",
    "x_t",
    "xba",
    "xcf",
    "xcgm",
    "xcodeproj",
    "xhtml",
    "xll",
    "xls",
    "xlsx",
    "xm",
    "xml",
    "xmlgz",
    "xpi",
    "xsl",
    "xz",
    "yaml",
    "yml",
    "yuv",
    "zig",
    "zip",
    "zipx",
    "zsh",
    "zst",
]

file_extensions_re = re.compile(r"\.(" + "|".join(file_extensions) + r")$")
